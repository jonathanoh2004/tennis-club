{
  "C:\\Users\\jonat\\github\\tennis-club\\backend\\serverless.yml": {
    "versionFramework": "4.19.1",
    "servicePath": "C:\\Users\\jonat\\github\\tennis-club\\backend\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "tennis-club-tracker",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-west-2",
        "stage": "dev",
        "environment": {
          "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
          "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
          "USERS_TABLE": "tennis-club-tracker-dev-Users",
          "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
          "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
          "MATCHES_BY_CLUB_INDEX": "byClubV2",
          "COGNITO_REGION": "us-east-2",
          "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
          "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:BatchWriteItem"
                ],
                "Resource": [
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Clubs",
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches",
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Users",
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections",
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers",
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches/index/*",
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections/index/*",
                  "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers/index/*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "execute-api:ManageConnections"
                ],
                "Resource": "arn:aws:execute-api:us-west-2:047212758498:*/dev/@connections/*"
              }
            ]
          }
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetClubsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getClubs"
              }
            },
            "CreateClubLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createClub"
              }
            },
            "CreateMatchLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createMatch"
              }
            },
            "DeleteClubLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-deleteClub"
              }
            },
            "ListMatchesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-listMatches"
              }
            },
            "GetMatchLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getMatch"
              }
            },
            "UpdateScoreLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-updateScore"
              }
            },
            "FinalizeMatchLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-finalizeMatch"
              }
            },
            "GetMeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getMe"
              }
            },
            "UpdateProfileLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-updateProfile"
              }
            },
            "JoinClubLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-joinClub"
              }
            },
            "ListMembersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-listMembers"
              }
            },
            "PreSignUpLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-preSignUp"
              }
            },
            "WsConnectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsConnect"
              }
            },
            "WsDisconnectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDisconnect"
              }
            },
            "WsDefaultLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDefault"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "tennis-club-tracker",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:BatchWriteItem"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Clubs",
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches",
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Users",
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections",
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers",
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches/index/*",
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections/index/*",
                            "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers/index/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "execute-api:ManageConnections"
                          ],
                          "Resource": "arn:aws:execute-api:us-west-2:047212758498:*/dev/@connections/*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "execute-api:ManageConnections"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "tennis-club-tracker",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetClubsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getClubs.zip"
                },
                "Handler": "handlers/clubs.get",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-getClubs",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetClubsLogGroup"
              ]
            },
            "CreateClubLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/createClub.zip"
                },
                "Handler": "handlers/clubs.create",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-createClub",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateClubLogGroup"
              ]
            },
            "CreateMatchLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/createMatch.zip"
                },
                "Handler": "handlers/matches.create",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-createMatch",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateMatchLogGroup"
              ]
            },
            "DeleteClubLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/deleteClub.zip"
                },
                "Handler": "handlers/clubs_delete.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-deleteClub",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteClubLogGroup"
              ]
            },
            "ListMatchesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/listMatches.zip"
                },
                "Handler": "handlers/matches.list",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-listMatches",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListMatchesLogGroup"
              ]
            },
            "GetMatchLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getMatch.zip"
                },
                "Handler": "handlers/matches.get",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-getMatch",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMatchLogGroup"
              ]
            },
            "UpdateScoreLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/updateScore.zip"
                },
                "Handler": "handlers/matches.score",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-updateScore",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateScoreLogGroup"
              ]
            },
            "FinalizeMatchLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/finalizeMatch.zip"
                },
                "Handler": "handlers/matches.finalize",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-finalizeMatch",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "FinalizeMatchLogGroup"
              ]
            },
            "GetMeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getMe.zip"
                },
                "Handler": "handlers/users.getMe",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-getMe",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMeLogGroup"
              ]
            },
            "UpdateProfileLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/updateProfile.zip"
                },
                "Handler": "handlers/users.updateProfile",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-updateProfile",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateProfileLogGroup"
              ]
            },
            "JoinClubLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/joinClub.zip"
                },
                "Handler": "handlers/members.join",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-joinClub",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "JoinClubLogGroup"
              ]
            },
            "ListMembersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/listMembers.zip"
                },
                "Handler": "handlers/members.list",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-listMembers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListMembersLogGroup"
              ]
            },
            "PreSignUpLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/preSignUp.zip"
                },
                "Handler": "handlers/authTriggers.preSignUp",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-preSignUp",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PreSignUpLogGroup"
              ]
            },
            "WsConnectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsConnect.zip"
                },
                "Handler": "handlers/websocket.connect",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-wsConnect",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "WsConnectLogGroup"
              ]
            },
            "WsDisconnectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsDisconnect.zip"
                },
                "Handler": "handlers/websocket.disconnect",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-wsDisconnect",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "WsDisconnectLogGroup"
              ]
            },
            "WsDefaultLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                  "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsDefault.zip"
                },
                "Handler": "handlers/websocket.onMessage",
                "Runtime": "nodejs20.x",
                "FunctionName": "tennis-club-tracker-dev-wsDefault",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                    "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                    "USERS_TABLE": "tennis-club-tracker-dev-Users",
                    "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                    "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                    "MATCHES_BY_CLUB_INDEX": "byClubV2",
                    "COGNITO_REGION": "us-east-2",
                    "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                    "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "WsDefaultLogGroup"
              ]
            },
            "CreateClubLambdaVersionct0IaZC6zFwaO5fFsBIhFZP9oZSncn7ImmMVhL67TI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateClubLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "GetClubsLambdaVersionaN7fy0xORcMJDeEqp3bWhhDyDiBALnDgczMW31TML0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetClubsLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "CreateMatchLambdaVersionwmkqpoBJhnI25Cq9X9ZvhsvJ8WvLTqkDXAIxmpUxo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMatchLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "DeleteClubLambdaVersion5LcOe6w3qFyfDK2NoFrb4661qP7zO8BK3CrVNHeeyg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteClubLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "GetMatchLambdaVersion9sY08c54HCPegivDFgH3ra4xxestqQxJlYXXUReztc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMatchLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "UpdateScoreLambdaVersionrHOp994yXo216RNe2Pqn6N9xIohpcsYa7r2rcoGLfs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateScoreLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "ListMatchesLambdaVersion3fHY78sc6nzYVrhF41Yg0GOpT2AneiYkOT3L0plQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListMatchesLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "GetMeLambdaVersion65WFSST83TOPmH5gpk8XQZTff0e8GPNgYlcaqjPto": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMeLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "FinalizeMatchLambdaVersionnWclLDrfSeANwtmXnYdD1PS2mhDVLR6yMBxgRc1ayek": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "FinalizeMatchLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "UpdateProfileLambdaVersionc8FC50ByTmYRf8I19oj7NuiBiFiPuEMltyi0bMhEE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateProfileLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "ListMembersLambdaVersionccQXT5JYAlHvo2Oqp7pilqmLdzxc0GCJVKjwKuU2bQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListMembersLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "WsDisconnectLambdaVersionjD9say63GiJZT7VvErEiGEfoK39deaxBbGRSQtcuS9I": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "WsDisconnectLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "JoinClubLambdaVersionuluwVLxId2PtOXIjqczb4NMwzs7pVRmCYHRaW4pXk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "JoinClubLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "WsDefaultLambdaVersionhOuaTj6DiEYVPlJN1a4plVKCt0Kk0hOb8qj2Pt4U7bM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "WsDefaultLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "WsConnectLambdaVersionMc49omLaHKeGTheXXRX8pUKIOaEjlxEcqhhvlYY0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "WsConnectLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "PreSignUpLambdaVersionRa18PyRLm6GgkZzBTWyIO5SHqkISF1CSEuLUwkmqc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PreSignUpLambdaFunction"
                },
                "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-tennis-club-tracker",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceClubs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "clubs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceClubsClubidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceClubs"
                },
                "PathPart": "{clubId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceClubsClubidVarMembers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceClubsClubidVar"
                },
                "PathPart": "members",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMatches": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "matches",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMatchesMatchidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMatches"
                },
                "PathPart": "{matchId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMatchesMatchidVarScore": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVar"
                },
                "PathPart": "score",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMatchesMatchidVarFinalize": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVar"
                },
                "PathPart": "finalize",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMe": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "me",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceProfile": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "profile",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodClubsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMatchesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatches"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodClubsClubidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubsClubidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMatchesMatchidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMatchesMatchidVarScoreOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMatchesMatchidVarFinalizeOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMeOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProfileOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProfile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodClubsClubidVarMembersOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubsClubidVarMembers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodClubsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetClubsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetClubsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodClubsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateClubLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateClubLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMatchesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatches"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateMatchLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateMatchLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodClubsClubidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubsClubidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteClubLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteClubLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMatchesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatches"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListMatchesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ListMatchesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMatchesMatchidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMatchLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMatchLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMatchesMatchidVarScorePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateScoreLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateScoreLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMatchesMatchidVarFinalizePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "FinalizeMatchLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "FinalizeMatchLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMeGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProfilePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProfile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateProfileLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateProfileLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodClubsClubidVarMembersPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubsClubidVarMembers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "JoinClubLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "JoinClubLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodClubsClubidVarMembersGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceClubsClubidVarMembers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListMembersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ListMembersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1758442838625": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodClubsOptions",
                "ApiGatewayMethodMatchesOptions",
                "ApiGatewayMethodClubsClubidVarOptions",
                "ApiGatewayMethodMatchesMatchidVarOptions",
                "ApiGatewayMethodMatchesMatchidVarScoreOptions",
                "ApiGatewayMethodMatchesMatchidVarFinalizeOptions",
                "ApiGatewayMethodMeOptions",
                "ApiGatewayMethodProfileOptions",
                "ApiGatewayMethodClubsClubidVarMembersOptions",
                "ApiGatewayMethodClubsGet",
                "ApiGatewayMethodClubsPost",
                "ApiGatewayMethodMatchesPost",
                "ApiGatewayMethodClubsClubidVarDelete",
                "ApiGatewayMethodMatchesGet",
                "ApiGatewayMethodMatchesMatchidVarGet",
                "ApiGatewayMethodMatchesMatchidVarScorePost",
                "ApiGatewayMethodMatchesMatchidVarFinalizePost",
                "ApiGatewayMethodMeGet",
                "ApiGatewayMethodProfilePost",
                "ApiGatewayMethodClubsClubidVarMembersPost",
                "ApiGatewayMethodClubsClubidVarMembersGet"
              ]
            },
            "GetClubsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetClubsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateClubLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateClubLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateMatchLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMatchLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteClubLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteClubLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListMatchesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListMatchesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMatchLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMatchLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateScoreLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateScoreLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "FinalizeMatchLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "FinalizeMatchLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateProfileLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "JoinClubLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "JoinClubLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListMembersLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListMembersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "WebsocketsApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-tennis-club-tracker-websockets",
                "RouteSelectionExpression": "$request.body.action",
                "Description": "Serverless Websockets",
                "ProtocolType": "WEBSOCKET"
              }
            },
            "WsConnectWebsocketsIntegration": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WsConnectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              }
            },
            "WsDisconnectWebsocketsIntegration": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WsDisconnectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              }
            },
            "WsDefaultWebsocketsIntegration": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WsDefaultLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              }
            },
            "WsConnectLambdaPermissionWebsockets": {
              "Type": "AWS::Lambda::Permission",
              "DependsOn": [
                "WebsocketsApi",
                "WsConnectLambdaFunction"
              ],
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "WsConnectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
              }
            },
            "WsDisconnectLambdaPermissionWebsockets": {
              "Type": "AWS::Lambda::Permission",
              "DependsOn": [
                "WebsocketsApi",
                "WsDisconnectLambdaFunction"
              ],
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "WsDisconnectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
              }
            },
            "WsDefaultLambdaPermissionWebsockets": {
              "Type": "AWS::Lambda::Permission",
              "DependsOn": [
                "WebsocketsApi",
                "WsDefaultLambdaFunction"
              ],
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "WsDefaultLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
              }
            },
            "SconnectWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$connect",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WsConnectWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "SdisconnectWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$disconnect",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WsDisconnectWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "SdefaultWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$default",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WsDefaultWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "WebsocketsDeploymentStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "StageName": "dev",
                "Description": "Serverless Websockets",
                "DeploymentId": {
                  "Ref": "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0"
                }
              }
            },
            "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0": {
              "Type": "AWS::ApiGatewayV2::Deployment",
              "DependsOn": [
                "SconnectWebsocketsRoute",
                "SdisconnectWebsocketsRoute",
                "SdefaultWebsocketsRoute"
              ],
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "Description": "Serverless Websockets"
              }
            },
            "ClubsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "tennis-club-tracker-dev-Clubs",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "clubId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "clubId",
                    "KeyType": "HASH"
                  }
                ]
              }
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "tennis-club-tracker-dev-Users",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ]
              }
            },
            "MatchesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "tennis-club-tracker-dev-Matches",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "matchId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "clubId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "startedAt",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "matchId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "byClub",
                    "KeySchema": [
                      {
                        "AttributeName": "clubId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "byClubV2",
                    "KeySchema": [
                      {
                        "AttributeName": "clubId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "startedAt",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            },
            "ConnectionsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "tennis-club-tracker-dev-Connections",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "connectionId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "clubId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "connectionId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "byClub",
                    "KeySchema": [
                      {
                        "AttributeName": "clubId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            },
            "ClubMembersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "tennis-club-tracker-dev-ClubMembers",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "clubId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "clubId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "userId",
                    "KeyType": "RANGE"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "byUser",
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-west-2-50484812-2351",
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateClubLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateClubLambdaVersionct0IaZC6zFwaO5fFsBIhFZP9oZSncn7ImmMVhL67TI"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-CreateClubLambdaFunctionQualifiedArn"
              }
            },
            "GetClubsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetClubsLambdaVersionaN7fy0xORcMJDeEqp3bWhhDyDiBALnDgczMW31TML0"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-GetClubsLambdaFunctionQualifiedArn"
              }
            },
            "CreateMatchLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMatchLambdaVersionwmkqpoBJhnI25Cq9X9ZvhsvJ8WvLTqkDXAIxmpUxo"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-CreateMatchLambdaFunctionQualifiedArn"
              }
            },
            "DeleteClubLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteClubLambdaVersion5LcOe6w3qFyfDK2NoFrb4661qP7zO8BK3CrVNHeeyg"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-DeleteClubLambdaFunctionQualifiedArn"
              }
            },
            "GetMatchLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMatchLambdaVersion9sY08c54HCPegivDFgH3ra4xxestqQxJlYXXUReztc"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-GetMatchLambdaFunctionQualifiedArn"
              }
            },
            "UpdateScoreLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateScoreLambdaVersionrHOp994yXo216RNe2Pqn6N9xIohpcsYa7r2rcoGLfs"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-UpdateScoreLambdaFunctionQualifiedArn"
              }
            },
            "ListMatchesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListMatchesLambdaVersion3fHY78sc6nzYVrhF41Yg0GOpT2AneiYkOT3L0plQ"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-ListMatchesLambdaFunctionQualifiedArn"
              }
            },
            "GetMeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMeLambdaVersion65WFSST83TOPmH5gpk8XQZTff0e8GPNgYlcaqjPto"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-GetMeLambdaFunctionQualifiedArn"
              }
            },
            "FinalizeMatchLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "FinalizeMatchLambdaVersionnWclLDrfSeANwtmXnYdD1PS2mhDVLR6yMBxgRc1ayek"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-FinalizeMatchLambdaFunctionQualifiedArn"
              }
            },
            "UpdateProfileLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateProfileLambdaVersionc8FC50ByTmYRf8I19oj7NuiBiFiPuEMltyi0bMhEE"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-UpdateProfileLambdaFunctionQualifiedArn"
              }
            },
            "ListMembersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListMembersLambdaVersionccQXT5JYAlHvo2Oqp7pilqmLdzxc0GCJVKjwKuU2bQ"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-ListMembersLambdaFunctionQualifiedArn"
              }
            },
            "WsDisconnectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "WsDisconnectLambdaVersionjD9say63GiJZT7VvErEiGEfoK39deaxBbGRSQtcuS9I"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-WsDisconnectLambdaFunctionQualifiedArn"
              }
            },
            "JoinClubLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "JoinClubLambdaVersionuluwVLxId2PtOXIjqczb4NMwzs7pVRmCYHRaW4pXk"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-JoinClubLambdaFunctionQualifiedArn"
              }
            },
            "WsDefaultLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "WsDefaultLambdaVersionhOuaTj6DiEYVPlJN1a4plVKCt0Kk0hOb8qj2Pt4U7bM"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-WsDefaultLambdaFunctionQualifiedArn"
              }
            },
            "WsConnectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "WsConnectLambdaVersionMc49omLaHKeGTheXXRX8pUKIOaEjlxEcqhhvlYY0"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-WsConnectLambdaFunctionQualifiedArn"
              }
            },
            "PreSignUpLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PreSignUpLambdaVersionRa18PyRLm6GgkZzBTWyIO5SHqkISF1CSEuLUwkmqc"
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-PreSignUpLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-ServiceEndpoint"
              }
            },
            "ServiceEndpointWebsocket": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "wss://",
                    {
                      "Ref": "WebsocketsApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-tennis-club-tracker-dev-ServiceEndpointWebsocket"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "individually": true,
        "patterns": [
          "handlers/**",
          "utils/**",
          "node_modules/**",
          "package.json",
          "package-lock.json"
        ],
        "artifactsS3KeyDirname": "serverless/tennis-club-tracker/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-west-2-50484812-2351",
        "artifactDirectoryName": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z"
      },
      "functions": {
        "getClubs": {
          "handler": "handlers/clubs.get",
          "events": [
            {
              "http": {
                "path": "clubs",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-getClubs",
          "package": {
            "artifact": ".serverless\\getClubs.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetClubsLambdaVersionaN7fy0xORcMJDeEqp3bWhhDyDiBALnDgczMW31TML0"
        },
        "createClub": {
          "handler": "handlers/clubs.create",
          "events": [
            {
              "http": {
                "path": "clubs",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-createClub",
          "package": {
            "artifact": ".serverless\\createClub.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateClubLambdaVersionct0IaZC6zFwaO5fFsBIhFZP9oZSncn7ImmMVhL67TI"
        },
        "createMatch": {
          "handler": "handlers/matches.create",
          "events": [
            {
              "http": {
                "path": "matches",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-createMatch",
          "package": {
            "artifact": ".serverless\\createMatch.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateMatchLambdaVersionwmkqpoBJhnI25Cq9X9ZvhsvJ8WvLTqkDXAIxmpUxo"
        },
        "deleteClub": {
          "handler": "handlers/clubs_delete.handler",
          "events": [
            {
              "http": {
                "path": "clubs/{clubId}",
                "method": "delete",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-deleteClub",
          "package": {
            "artifact": ".serverless\\deleteClub.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteClubLambdaVersion5LcOe6w3qFyfDK2NoFrb4661qP7zO8BK3CrVNHeeyg"
        },
        "listMatches": {
          "handler": "handlers/matches.list",
          "events": [
            {
              "http": {
                "path": "matches",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-listMatches",
          "package": {
            "artifact": ".serverless\\listMatches.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ListMatchesLambdaVersion3fHY78sc6nzYVrhF41Yg0GOpT2AneiYkOT3L0plQ"
        },
        "getMatch": {
          "handler": "handlers/matches.get",
          "events": [
            {
              "http": {
                "path": "matches/{matchId}",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-getMatch",
          "package": {
            "artifact": ".serverless\\getMatch.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetMatchLambdaVersion9sY08c54HCPegivDFgH3ra4xxestqQxJlYXXUReztc"
        },
        "updateScore": {
          "handler": "handlers/matches.score",
          "events": [
            {
              "http": {
                "path": "matches/{matchId}/score",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-updateScore",
          "package": {
            "artifact": ".serverless\\updateScore.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateScoreLambdaVersionrHOp994yXo216RNe2Pqn6N9xIohpcsYa7r2rcoGLfs"
        },
        "finalizeMatch": {
          "handler": "handlers/matches.finalize",
          "events": [
            {
              "http": {
                "path": "matches/{matchId}/finalize",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-finalizeMatch",
          "package": {
            "artifact": ".serverless\\finalizeMatch.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "FinalizeMatchLambdaVersionnWclLDrfSeANwtmXnYdD1PS2mhDVLR6yMBxgRc1ayek"
        },
        "getMe": {
          "handler": "handlers/users.getMe",
          "events": [
            {
              "http": {
                "path": "me",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-getMe",
          "package": {
            "artifact": ".serverless\\getMe.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetMeLambdaVersion65WFSST83TOPmH5gpk8XQZTff0e8GPNgYlcaqjPto"
        },
        "updateProfile": {
          "handler": "handlers/users.updateProfile",
          "events": [
            {
              "http": {
                "path": "profile",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-updateProfile",
          "package": {
            "artifact": ".serverless\\updateProfile.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateProfileLambdaVersionc8FC50ByTmYRf8I19oj7NuiBiFiPuEMltyi0bMhEE"
        },
        "joinClub": {
          "handler": "handlers/members.join",
          "events": [
            {
              "http": {
                "path": "clubs/{clubId}/members",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-joinClub",
          "package": {
            "artifact": ".serverless\\joinClub.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "JoinClubLambdaVersionuluwVLxId2PtOXIjqczb4NMwzs7pVRmCYHRaW4pXk"
        },
        "listMembers": {
          "handler": "handlers/members.list",
          "events": [
            {
              "http": {
                "path": "clubs/{clubId}/members",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "https://tenniscluboh.com",
                    "https://www.tenniscluboh.com",
                    "http://localhost:5173"
                  ]
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-listMembers",
          "package": {
            "artifact": ".serverless\\listMembers.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ListMembersLambdaVersionccQXT5JYAlHvo2Oqp7pilqmLdzxc0GCJVKjwKuU2bQ"
        },
        "preSignUp": {
          "handler": "handlers/authTriggers.preSignUp",
          "events": [],
          "name": "tennis-club-tracker-dev-preSignUp",
          "package": {
            "artifact": ".serverless\\preSignUp.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PreSignUpLambdaVersionRa18PyRLm6GgkZzBTWyIO5SHqkISF1CSEuLUwkmqc"
        },
        "wsConnect": {
          "handler": "handlers/websocket.connect",
          "events": [
            {
              "websocket": {
                "route": "$connect"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-wsConnect",
          "package": {
            "artifact": ".serverless\\wsConnect.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "WsConnectLambdaVersionMc49omLaHKeGTheXXRX8pUKIOaEjlxEcqhhvlYY0"
        },
        "wsDisconnect": {
          "handler": "handlers/websocket.disconnect",
          "events": [
            {
              "websocket": {
                "route": "$disconnect"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-wsDisconnect",
          "package": {
            "artifact": ".serverless\\wsDisconnect.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "WsDisconnectLambdaVersionjD9say63GiJZT7VvErEiGEfoK39deaxBbGRSQtcuS9I"
        },
        "wsDefault": {
          "handler": "handlers/websocket.onMessage",
          "events": [
            {
              "websocket": {
                "route": "$default"
              }
            }
          ],
          "name": "tennis-club-tracker-dev-wsDefault",
          "package": {
            "artifact": ".serverless\\wsDefault.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "WsDefaultLambdaVersionhOuaTj6DiEYVPlJN1a4plVKCt0Kk0hOb8qj2Pt4U7bM"
        }
      },
      "resources": {
        "Resources": {
          "ClubsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Clubs",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "clubId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Users",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "MatchesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Matches",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "matchId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "startedAt",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "matchId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byClub",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "byClubV2",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "startedAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "ConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byClub",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "ClubMembersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-ClubMembers",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "clubId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "userId",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byUser",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-west-2",
      "stage": "dev",
      "environment": {
        "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
        "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
        "USERS_TABLE": "tennis-club-tracker-dev-Users",
        "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
        "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
        "MATCHES_BY_CLUB_INDEX": "byClubV2",
        "COGNITO_REGION": "us-east-2",
        "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
        "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Clubs",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Users",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches/index/*",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections/index/*",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers/index/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:ManageConnections"
              ],
              "Resource": "arn:aws:execute-api:us-west-2:047212758498:*/dev/@connections/*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetClubsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getClubs"
            }
          },
          "CreateClubLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createClub"
            }
          },
          "CreateMatchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createMatch"
            }
          },
          "DeleteClubLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-deleteClub"
            }
          },
          "ListMatchesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-listMatches"
            }
          },
          "GetMatchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getMatch"
            }
          },
          "UpdateScoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-updateScore"
            }
          },
          "FinalizeMatchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-finalizeMatch"
            }
          },
          "GetMeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getMe"
            }
          },
          "UpdateProfileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-updateProfile"
            }
          },
          "JoinClubLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-joinClub"
            }
          },
          "ListMembersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-listMembers"
            }
          },
          "PreSignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-preSignUp"
            }
          },
          "WsConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsConnect"
            }
          },
          "WsDisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDisconnect"
            }
          },
          "WsDefaultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDefault"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "tennis-club-tracker",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem",
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:BatchWriteItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Clubs",
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches",
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Users",
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections",
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers",
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches/index/*",
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections/index/*",
                          "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers/index/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": "arn:aws:execute-api:us-west-2:047212758498:*/dev/@connections/*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tennis-club-tracker",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetClubsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getClubs.zip"
              },
              "Handler": "handlers/clubs.get",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-getClubs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClubsLogGroup"
            ]
          },
          "CreateClubLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/createClub.zip"
              },
              "Handler": "handlers/clubs.create",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-createClub",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateClubLogGroup"
            ]
          },
          "CreateMatchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/createMatch.zip"
              },
              "Handler": "handlers/matches.create",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-createMatch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateMatchLogGroup"
            ]
          },
          "DeleteClubLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/deleteClub.zip"
              },
              "Handler": "handlers/clubs_delete.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-deleteClub",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteClubLogGroup"
            ]
          },
          "ListMatchesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/listMatches.zip"
              },
              "Handler": "handlers/matches.list",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-listMatches",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListMatchesLogGroup"
            ]
          },
          "GetMatchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getMatch.zip"
              },
              "Handler": "handlers/matches.get",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-getMatch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMatchLogGroup"
            ]
          },
          "UpdateScoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/updateScore.zip"
              },
              "Handler": "handlers/matches.score",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-updateScore",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateScoreLogGroup"
            ]
          },
          "FinalizeMatchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/finalizeMatch.zip"
              },
              "Handler": "handlers/matches.finalize",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-finalizeMatch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FinalizeMatchLogGroup"
            ]
          },
          "GetMeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getMe.zip"
              },
              "Handler": "handlers/users.getMe",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-getMe",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMeLogGroup"
            ]
          },
          "UpdateProfileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/updateProfile.zip"
              },
              "Handler": "handlers/users.updateProfile",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-updateProfile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProfileLogGroup"
            ]
          },
          "JoinClubLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/joinClub.zip"
              },
              "Handler": "handlers/members.join",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-joinClub",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JoinClubLogGroup"
            ]
          },
          "ListMembersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/listMembers.zip"
              },
              "Handler": "handlers/members.list",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-listMembers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListMembersLogGroup"
            ]
          },
          "PreSignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/preSignUp.zip"
              },
              "Handler": "handlers/authTriggers.preSignUp",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-preSignUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PreSignUpLogGroup"
            ]
          },
          "WsConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsConnect.zip"
              },
              "Handler": "handlers/websocket.connect",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-wsConnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WsConnectLogGroup"
            ]
          },
          "WsDisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsDisconnect.zip"
              },
              "Handler": "handlers/websocket.disconnect",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-wsDisconnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WsDisconnectLogGroup"
            ]
          },
          "WsDefaultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsDefault.zip"
              },
              "Handler": "handlers/websocket.onMessage",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-wsDefault",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                  "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                  "MATCHES_BY_CLUB_INDEX": "byClubV2",
                  "COGNITO_REGION": "us-east-2",
                  "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                  "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WsDefaultLogGroup"
            ]
          },
          "CreateClubLambdaVersionct0IaZC6zFwaO5fFsBIhFZP9oZSncn7ImmMVhL67TI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateClubLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "GetClubsLambdaVersionaN7fy0xORcMJDeEqp3bWhhDyDiBALnDgczMW31TML0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClubsLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "CreateMatchLambdaVersionwmkqpoBJhnI25Cq9X9ZvhsvJ8WvLTqkDXAIxmpUxo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateMatchLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "DeleteClubLambdaVersion5LcOe6w3qFyfDK2NoFrb4661qP7zO8BK3CrVNHeeyg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteClubLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "GetMatchLambdaVersion9sY08c54HCPegivDFgH3ra4xxestqQxJlYXXUReztc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMatchLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "UpdateScoreLambdaVersionrHOp994yXo216RNe2Pqn6N9xIohpcsYa7r2rcoGLfs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateScoreLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "ListMatchesLambdaVersion3fHY78sc6nzYVrhF41Yg0GOpT2AneiYkOT3L0plQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListMatchesLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "GetMeLambdaVersion65WFSST83TOPmH5gpk8XQZTff0e8GPNgYlcaqjPto": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMeLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "FinalizeMatchLambdaVersionnWclLDrfSeANwtmXnYdD1PS2mhDVLR6yMBxgRc1ayek": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FinalizeMatchLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "UpdateProfileLambdaVersionc8FC50ByTmYRf8I19oj7NuiBiFiPuEMltyi0bMhEE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProfileLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "ListMembersLambdaVersionccQXT5JYAlHvo2Oqp7pilqmLdzxc0GCJVKjwKuU2bQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListMembersLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "WsDisconnectLambdaVersionjD9say63GiJZT7VvErEiGEfoK39deaxBbGRSQtcuS9I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsDisconnectLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "JoinClubLambdaVersionuluwVLxId2PtOXIjqczb4NMwzs7pVRmCYHRaW4pXk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JoinClubLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "WsDefaultLambdaVersionhOuaTj6DiEYVPlJN1a4plVKCt0Kk0hOb8qj2Pt4U7bM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsDefaultLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "WsConnectLambdaVersionMc49omLaHKeGTheXXRX8pUKIOaEjlxEcqhhvlYY0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsConnectLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "PreSignUpLambdaVersionRa18PyRLm6GgkZzBTWyIO5SHqkISF1CSEuLUwkmqc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PreSignUpLambdaFunction"
              },
              "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-tennis-club-tracker",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceClubs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "clubs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceClubsClubidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceClubs"
              },
              "PathPart": "{clubId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceClubsClubidVarMembers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceClubsClubidVar"
              },
              "PathPart": "members",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatches": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "matches",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchesMatchidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "PathPart": "{matchId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchesMatchidVarScore": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "PathPart": "score",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchesMatchidVarFinalize": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "PathPart": "finalize",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "me",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProfile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "profile",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodClubsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodClubsClubidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubsClubidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesMatchidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesMatchidVarScoreOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesMatchidVarFinalizeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProfileOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodClubsClubidVarMembersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubsClubidVarMembers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodClubsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClubsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetClubsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodClubsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateClubLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateClubLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateMatchLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateMatchLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodClubsClubidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubsClubidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteClubLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteClubLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListMatchesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListMatchesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesMatchidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetMatchLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetMatchLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesMatchidVarScorePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateScoreLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateScoreLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesMatchidVarFinalizePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FinalizeMatchLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FinalizeMatchLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetMeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetMeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProfilePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProfileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateProfileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodClubsClubidVarMembersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubsClubidVarMembers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "JoinClubLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JoinClubLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodClubsClubidVarMembersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubsClubidVarMembers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListMembersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListMembersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1758442838625": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodClubsOptions",
              "ApiGatewayMethodMatchesOptions",
              "ApiGatewayMethodClubsClubidVarOptions",
              "ApiGatewayMethodMatchesMatchidVarOptions",
              "ApiGatewayMethodMatchesMatchidVarScoreOptions",
              "ApiGatewayMethodMatchesMatchidVarFinalizeOptions",
              "ApiGatewayMethodMeOptions",
              "ApiGatewayMethodProfileOptions",
              "ApiGatewayMethodClubsClubidVarMembersOptions",
              "ApiGatewayMethodClubsGet",
              "ApiGatewayMethodClubsPost",
              "ApiGatewayMethodMatchesPost",
              "ApiGatewayMethodClubsClubidVarDelete",
              "ApiGatewayMethodMatchesGet",
              "ApiGatewayMethodMatchesMatchidVarGet",
              "ApiGatewayMethodMatchesMatchidVarScorePost",
              "ApiGatewayMethodMatchesMatchidVarFinalizePost",
              "ApiGatewayMethodMeGet",
              "ApiGatewayMethodProfilePost",
              "ApiGatewayMethodClubsClubidVarMembersPost",
              "ApiGatewayMethodClubsClubidVarMembersGet"
            ]
          },
          "GetClubsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClubsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateClubLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateClubLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateMatchLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateMatchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteClubLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteClubLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListMatchesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListMatchesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetMatchLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMatchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateScoreLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateScoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FinalizeMatchLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FinalizeMatchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetMeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProfileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProfileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "JoinClubLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JoinClubLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListMembersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListMembersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-tennis-club-tracker-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "WsConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsDisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsDisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsDefaultWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsDefaultLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "WsDisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsDisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsDisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "WsDefaultLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsDefaultLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsDefaultLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsDisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsDefaultWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0"
              }
            }
          },
          "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "ClubsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Clubs",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "clubId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Users",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "MatchesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Matches",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "matchId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "startedAt",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "matchId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byClub",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "byClubV2",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "startedAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "ConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byClub",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "ClubMembersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-ClubMembers",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "clubId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "userId",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byUser",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-west-2-50484812-2351",
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateClubLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateClubLambdaVersionct0IaZC6zFwaO5fFsBIhFZP9oZSncn7ImmMVhL67TI"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-CreateClubLambdaFunctionQualifiedArn"
            }
          },
          "GetClubsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClubsLambdaVersionaN7fy0xORcMJDeEqp3bWhhDyDiBALnDgczMW31TML0"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-GetClubsLambdaFunctionQualifiedArn"
            }
          },
          "CreateMatchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateMatchLambdaVersionwmkqpoBJhnI25Cq9X9ZvhsvJ8WvLTqkDXAIxmpUxo"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-CreateMatchLambdaFunctionQualifiedArn"
            }
          },
          "DeleteClubLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteClubLambdaVersion5LcOe6w3qFyfDK2NoFrb4661qP7zO8BK3CrVNHeeyg"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-DeleteClubLambdaFunctionQualifiedArn"
            }
          },
          "GetMatchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMatchLambdaVersion9sY08c54HCPegivDFgH3ra4xxestqQxJlYXXUReztc"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-GetMatchLambdaFunctionQualifiedArn"
            }
          },
          "UpdateScoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateScoreLambdaVersionrHOp994yXo216RNe2Pqn6N9xIohpcsYa7r2rcoGLfs"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-UpdateScoreLambdaFunctionQualifiedArn"
            }
          },
          "ListMatchesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListMatchesLambdaVersion3fHY78sc6nzYVrhF41Yg0GOpT2AneiYkOT3L0plQ"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ListMatchesLambdaFunctionQualifiedArn"
            }
          },
          "GetMeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMeLambdaVersion65WFSST83TOPmH5gpk8XQZTff0e8GPNgYlcaqjPto"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-GetMeLambdaFunctionQualifiedArn"
            }
          },
          "FinalizeMatchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FinalizeMatchLambdaVersionnWclLDrfSeANwtmXnYdD1PS2mhDVLR6yMBxgRc1ayek"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-FinalizeMatchLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProfileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProfileLambdaVersionc8FC50ByTmYRf8I19oj7NuiBiFiPuEMltyi0bMhEE"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-UpdateProfileLambdaFunctionQualifiedArn"
            }
          },
          "ListMembersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListMembersLambdaVersionccQXT5JYAlHvo2Oqp7pilqmLdzxc0GCJVKjwKuU2bQ"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ListMembersLambdaFunctionQualifiedArn"
            }
          },
          "WsDisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsDisconnectLambdaVersionjD9say63GiJZT7VvErEiGEfoK39deaxBbGRSQtcuS9I"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-WsDisconnectLambdaFunctionQualifiedArn"
            }
          },
          "JoinClubLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JoinClubLambdaVersionuluwVLxId2PtOXIjqczb4NMwzs7pVRmCYHRaW4pXk"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-JoinClubLambdaFunctionQualifiedArn"
            }
          },
          "WsDefaultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsDefaultLambdaVersionhOuaTj6DiEYVPlJN1a4plVKCt0Kk0hOb8qj2Pt4U7bM"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-WsDefaultLambdaFunctionQualifiedArn"
            }
          },
          "WsConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsConnectLambdaVersionMc49omLaHKeGTheXXRX8pUKIOaEjlxEcqhhvlYY0"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-WsConnectLambdaFunctionQualifiedArn"
            }
          },
          "PreSignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PreSignUpLambdaVersionRa18PyRLm6GgkZzBTWyIO5SHqkISF1CSEuLUwkmqc"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-PreSignUpLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ServiceEndpoint"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ServiceEndpointWebsocket"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: tennis-club-tracker\r\nframeworkVersion: \"4\"\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: us-west-2\r\n  stage: dev\r\n  environment:\r\n    CLUBS_TABLE: ${self:service}-${sls:stage}-Clubs\r\n    MATCHES_TABLE: ${self:service}-${sls:stage}-Matches\r\n    USERS_TABLE: ${self:service}-${sls:stage}-Users\r\n    CONNECTIONS_TABLE: ${self:service}-${sls:stage}-Connections\r\n    CLUB_MEMBERS_TABLE: ${self:service}-${sls:stage}-ClubMembers\r\n    # GSI name used by matches.list\r\n    MATCHES_BY_CLUB_INDEX: byClubV2\r\n    # JWT verification (Cognito)\r\n    COGNITO_REGION: us-east-2\r\n    COGNITO_POOL_ID: us-east-2_EMupYOMCX\r\n    COGNITO_CLIENT_ID: 35qpjq5uuv929k26amc1rbkdlk\r\n\r\n  iam:\r\n    role:\r\n      statements:\r\n        # Table-level CRUD + read ops\r\n        - Effect: Allow\r\n          Action:\r\n            - dynamodb:PutItem\r\n            - dynamodb:GetItem\r\n            - dynamodb:UpdateItem\r\n            - dynamodb:DeleteItem\r\n            - dynamodb:Query\r\n            - dynamodb:Scan\r\n            - dynamodb:BatchWriteItem   # cascade deletions\r\n          Resource:\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.CLUBS_TABLE}\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.MATCHES_TABLE}\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.USERS_TABLE}\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.CONNECTIONS_TABLE}\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.CLUB_MEMBERS_TABLE}\r\n            # allow ALL GSIs on these tables (prevents future ARN edits)\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.MATCHES_TABLE}/index/*\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.CONNECTIONS_TABLE}/index/*\r\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.CLUB_MEMBERS_TABLE}/index/*\r\n\r\n        # WebSocket connection mgmt\r\n        - Effect: Allow\r\n          Action:\r\n            - execute-api:ManageConnections\r\n          Resource:\r\n            - arn:aws:execute-api:${aws:region}:${aws:accountId}:*/${sls:stage}/@connections/*\r\n\r\npackage:\r\n  individually: true\r\n  patterns:\r\n    - handlers/**\r\n    - utils/**\r\n    - node_modules/**\r\n    - package.json\r\n    - package-lock.json\r\n\r\nfunctions:\r\n  # ---------- REST ----------\r\n  getClubs:\r\n    handler: handlers/clubs.get\r\n    events:\r\n      - http:\r\n          path: clubs\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  createClub:\r\n    handler: handlers/clubs.create\r\n    events:\r\n      - http:\r\n          path: clubs\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  createMatch:\r\n    handler: handlers/matches.create\r\n    events:\r\n      - http:\r\n          path: matches\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  deleteClub:\r\n    handler: handlers/clubs_delete.handler\r\n    events:\r\n      - http:\r\n          path: clubs/{clubId}\r\n          method: delete\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n            methods:\r\n              - OPTIONS\r\n              - DELETE\r\n\r\n  listMatches:\r\n    handler: handlers/matches.list\r\n    events:\r\n      - http:\r\n          path: matches\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  getMatch:\r\n    handler: handlers/matches.get\r\n    events:\r\n      - http:\r\n          path: matches/{matchId}\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  updateScore:\r\n    handler: handlers/matches.score\r\n    events:\r\n      - http:\r\n          path: matches/{matchId}/score\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  finalizeMatch:\r\n    handler: handlers/matches.finalize\r\n    events:\r\n      - http:\r\n          path: matches/{matchId}/finalize\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  # Users\r\n  getMe:\r\n    handler: handlers/users.getMe\r\n    events:\r\n      - http:\r\n          path: me\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  updateProfile:\r\n    handler: handlers/users.updateProfile\r\n    events:\r\n      - http:\r\n          path: profile\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  # Club membership\r\n  joinClub:\r\n    handler: handlers/members.join\r\n    events:\r\n      - http:\r\n          path: clubs/{clubId}/members\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  listMembers:\r\n    handler: handlers/members.list\r\n    events:\r\n      - http:\r\n          path: clubs/{clubId}/members\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - https://tenniscluboh.com\r\n              - https://www.tenniscluboh.com\r\n              - http://localhost:5173\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  # Optional: Pre sign-up auto-confirm trigger (not wired in console)\r\n  preSignUp:\r\n    handler: handlers/authTriggers.preSignUp\r\n\r\n  # ---------- WebSocket ----------\r\n  wsConnect:\r\n    handler: handlers/websocket.connect\r\n    events:\r\n      - websocket:\r\n          route: $connect\r\n\r\n  wsDisconnect:\r\n    handler: handlers/websocket.disconnect\r\n    events:\r\n      - websocket:\r\n          route: $disconnect\r\n\r\n  wsDefault:\r\n    handler: handlers/websocket.onMessage\r\n    events:\r\n      - websocket:\r\n          route: $default\r\n\r\nresources:\r\n  Resources:\r\n    ClubsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.CLUBS_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: clubId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: clubId\r\n            KeyType: HASH\r\n\r\n    UsersTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.USERS_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n\r\n    MatchesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.MATCHES_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: matchId\r\n            AttributeType: S\r\n          - AttributeName: clubId\r\n            AttributeType: S\r\n          - AttributeName: startedAt\r\n            AttributeType: N\r\n        KeySchema:\r\n          - AttributeName: matchId\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          # Keep the existing GSI EXACTLY as it exists in AWS (hash-only)\r\n          - IndexName: byClub\r\n            KeySchema:\r\n              - AttributeName: clubId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n\r\n          # Add the new GSI you will use going forward (hash + range)\r\n          - IndexName: byClubV2\r\n            KeySchema:\r\n              - AttributeName: clubId\r\n                KeyType: HASH\r\n              - AttributeName: startedAt\r\n                KeyType: RANGE\r\n            Projection:\r\n              ProjectionType: ALL\r\n\r\n    ConnectionsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.CONNECTIONS_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: connectionId\r\n            AttributeType: S\r\n          - AttributeName: clubId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: connectionId\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: byClub\r\n            KeySchema:\r\n              - AttributeName: clubId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n\r\n    ClubMembersTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.CLUB_MEMBERS_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: clubId\r\n            AttributeType: S\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: clubId\r\n            KeyType: HASH\r\n          - AttributeName: userId\r\n            KeyType: RANGE\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: byUser\r\n            KeySchema:\r\n              - AttributeName: userId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n",
    "command": [
      "deploy"
    ],
    "options": {
      "stage": "dev",
      "aws-profile": "tennis"
    },
    "orgId": "10bb995e-684d-462c-94d3-b218f99288a9",
    "orgName": "jaysohcode",
    "userId": "sZJ5HGGGmCd9zcBFxV",
    "userName": "jaysohcode",
    "serviceProviderAwsAccountId": "047212758498",
    "serviceProviderAwsCfStackName": "tennis-club-tracker-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-west-2:047212758498:stack/tennis-club-tracker-dev/ff704d60-75ac-11f0-8fa9-0a13a4d37ce1",
    "serviceProviderAwsCfStackCreated": "2025-08-10T05:43:53.223Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-21T08:18:17.813Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DeleteClubLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-deleteClub:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-DeleteClubLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "WsDefaultLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-wsDefault:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-WsDefaultLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "WsDisconnectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-wsDisconnect:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-WsDisconnectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "JoinClubLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-joinClub:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-JoinClubLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ListMembersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-listMembers:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-ListMembersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-getMe:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-GetMeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PreSignUpLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-preSignUp:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-PreSignUpLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "WsConnectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-wsConnect:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-WsConnectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-west-2-50484812-2351",
        "ExportName": "sls-tennis-club-tracker-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GetClubsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-getClubs:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-GetClubsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateProfileLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-updateProfile:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-UpdateProfileLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMatchLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-createMatch:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-CreateMatchLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateScoreLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-updateScore:14",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-UpdateScoreLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMatchLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-getMatch:14",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-GetMatchLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ListMatchesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-listMatches:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-ListMatchesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateClubLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-createClub:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-CreateClubLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://r9521m884k.execute-api.us-west-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-tennis-club-tracker-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServiceEndpointWebsocket",
        "OutputValue": "wss://pzewo98x2m.execute-api.us-west-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-tennis-club-tracker-dev-ServiceEndpointWebsocket"
      },
      {
        "OutputKey": "FinalizeMatchLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:047212758498:function:tennis-club-tracker-dev-finalizeMatch:14",
        "Description": "Current Lambda function version",
        "ExportName": "sls-tennis-club-tracker-dev-FinalizeMatchLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GetClubsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getClubs"
          }
        },
        "CreateClubLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createClub"
          }
        },
        "CreateMatchLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createMatch"
          }
        },
        "DeleteClubLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-deleteClub"
          }
        },
        "ListMatchesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-listMatches"
          }
        },
        "GetMatchLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getMatch"
          }
        },
        "UpdateScoreLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-updateScore"
          }
        },
        "FinalizeMatchLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-finalizeMatch"
          }
        },
        "GetMeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getMe"
          }
        },
        "UpdateProfileLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-updateProfile"
          }
        },
        "JoinClubLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-joinClub"
          }
        },
        "ListMembersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-listMembers"
          }
        },
        "PreSignUpLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-preSignUp"
          }
        },
        "WsConnectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsConnect"
          }
        },
        "WsDisconnectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDisconnect"
          }
        },
        "WsDefaultLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDefault"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "tennis-club-tracker",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:BatchWriteItem"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Clubs",
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches",
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Users",
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections",
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers",
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches/index/*",
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections/index/*",
                        "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-ClubMembers/index/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "execute-api:ManageConnections"
                      ],
                      "Resource": "arn:aws:execute-api:us-west-2:047212758498:*/dev/@connections/*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "execute-api:ManageConnections"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "tennis-club-tracker",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "GetClubsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getClubs.zip"
            },
            "Handler": "handlers/clubs.get",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-getClubs",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetClubsLogGroup"
          ]
        },
        "CreateClubLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/createClub.zip"
            },
            "Handler": "handlers/clubs.create",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-createClub",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateClubLogGroup"
          ]
        },
        "CreateMatchLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/createMatch.zip"
            },
            "Handler": "handlers/matches.create",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-createMatch",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateMatchLogGroup"
          ]
        },
        "DeleteClubLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/deleteClub.zip"
            },
            "Handler": "handlers/clubs_delete.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-deleteClub",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteClubLogGroup"
          ]
        },
        "ListMatchesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/listMatches.zip"
            },
            "Handler": "handlers/matches.list",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-listMatches",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ListMatchesLogGroup"
          ]
        },
        "GetMatchLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getMatch.zip"
            },
            "Handler": "handlers/matches.get",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-getMatch",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetMatchLogGroup"
          ]
        },
        "UpdateScoreLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/updateScore.zip"
            },
            "Handler": "handlers/matches.score",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-updateScore",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateScoreLogGroup"
          ]
        },
        "FinalizeMatchLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/finalizeMatch.zip"
            },
            "Handler": "handlers/matches.finalize",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-finalizeMatch",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "FinalizeMatchLogGroup"
          ]
        },
        "GetMeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/getMe.zip"
            },
            "Handler": "handlers/users.getMe",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-getMe",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetMeLogGroup"
          ]
        },
        "UpdateProfileLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/updateProfile.zip"
            },
            "Handler": "handlers/users.updateProfile",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-updateProfile",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateProfileLogGroup"
          ]
        },
        "JoinClubLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/joinClub.zip"
            },
            "Handler": "handlers/members.join",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-joinClub",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "JoinClubLogGroup"
          ]
        },
        "ListMembersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/listMembers.zip"
            },
            "Handler": "handlers/members.list",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-listMembers",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ListMembersLogGroup"
          ]
        },
        "PreSignUpLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/preSignUp.zip"
            },
            "Handler": "handlers/authTriggers.preSignUp",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-preSignUp",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PreSignUpLogGroup"
          ]
        },
        "WsConnectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsConnect.zip"
            },
            "Handler": "handlers/websocket.connect",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-wsConnect",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "WsConnectLogGroup"
          ]
        },
        "WsDisconnectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsDisconnect.zip"
            },
            "Handler": "handlers/websocket.disconnect",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-wsDisconnect",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "WsDisconnectLogGroup"
          ]
        },
        "WsDefaultLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
              "S3Key": "serverless/tennis-club-tracker/dev/1758442856463-2025-09-21T08:20:56.463Z/wsDefault.zip"
            },
            "Handler": "handlers/websocket.onMessage",
            "Runtime": "nodejs20.x",
            "FunctionName": "tennis-club-tracker-dev-wsDefault",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                "USERS_TABLE": "tennis-club-tracker-dev-Users",
                "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections",
                "CLUB_MEMBERS_TABLE": "tennis-club-tracker-dev-ClubMembers",
                "MATCHES_BY_CLUB_INDEX": "byClubV2",
                "COGNITO_REGION": "us-east-2",
                "COGNITO_POOL_ID": "us-east-2_EMupYOMCX",
                "COGNITO_CLIENT_ID": "35qpjq5uuv929k26amc1rbkdlk"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "WsDefaultLogGroup"
          ]
        },
        "CreateClubLambdaVersionct0IaZC6zFwaO5fFsBIhFZP9oZSncn7ImmMVhL67TI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateClubLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "GetClubsLambdaVersionaN7fy0xORcMJDeEqp3bWhhDyDiBALnDgczMW31TML0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetClubsLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "CreateMatchLambdaVersionwmkqpoBJhnI25Cq9X9ZvhsvJ8WvLTqkDXAIxmpUxo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateMatchLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "DeleteClubLambdaVersion5LcOe6w3qFyfDK2NoFrb4661qP7zO8BK3CrVNHeeyg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteClubLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "GetMatchLambdaVersion9sY08c54HCPegivDFgH3ra4xxestqQxJlYXXUReztc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetMatchLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "UpdateScoreLambdaVersionrHOp994yXo216RNe2Pqn6N9xIohpcsYa7r2rcoGLfs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateScoreLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "ListMatchesLambdaVersion3fHY78sc6nzYVrhF41Yg0GOpT2AneiYkOT3L0plQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ListMatchesLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "GetMeLambdaVersion65WFSST83TOPmH5gpk8XQZTff0e8GPNgYlcaqjPto": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetMeLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "FinalizeMatchLambdaVersionnWclLDrfSeANwtmXnYdD1PS2mhDVLR6yMBxgRc1ayek": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "FinalizeMatchLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "UpdateProfileLambdaVersionc8FC50ByTmYRf8I19oj7NuiBiFiPuEMltyi0bMhEE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateProfileLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "ListMembersLambdaVersionccQXT5JYAlHvo2Oqp7pilqmLdzxc0GCJVKjwKuU2bQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ListMembersLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "WsDisconnectLambdaVersionjD9say63GiJZT7VvErEiGEfoK39deaxBbGRSQtcuS9I": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "WsDisconnectLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "JoinClubLambdaVersionuluwVLxId2PtOXIjqczb4NMwzs7pVRmCYHRaW4pXk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "JoinClubLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "WsDefaultLambdaVersionhOuaTj6DiEYVPlJN1a4plVKCt0Kk0hOb8qj2Pt4U7bM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "WsDefaultLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "WsConnectLambdaVersionMc49omLaHKeGTheXXRX8pUKIOaEjlxEcqhhvlYY0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "WsConnectLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "PreSignUpLambdaVersionRa18PyRLm6GgkZzBTWyIO5SHqkISF1CSEuLUwkmqc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PreSignUpLambdaFunction"
            },
            "CodeSha256": "ySFPG1/kUixlC3NfLFx5DviNqb6lcYbJ61wXgR8W9Hk="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-tennis-club-tracker",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceClubs": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "clubs",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceClubsClubidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceClubs"
            },
            "PathPart": "{clubId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceClubsClubidVarMembers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceClubsClubidVar"
            },
            "PathPart": "members",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceMatches": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "matches",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceMatchesMatchidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceMatches"
            },
            "PathPart": "{matchId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceMatchesMatchidVarScore": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVar"
            },
            "PathPart": "score",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceMatchesMatchidVarFinalize": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVar"
            },
            "PathPart": "finalize",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceMe": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "me",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceProfile": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "profile",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodClubsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodMatchesOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatches"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodClubsClubidVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubsClubidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodMatchesMatchidVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodMatchesMatchidVarScoreOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodMatchesMatchidVarFinalizeOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodMeOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceMe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodProfileOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceProfile"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodClubsClubidVarMembersOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'https://tenniscluboh.com'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"https://tenniscluboh[.]com\") || $origin.matches(\"https://www[.]tenniscluboh[.]com\") || $origin.matches(\"http://localhost:5173\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubsClubidVarMembers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodClubsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetClubsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetClubsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodClubsPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateClubLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateClubLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodMatchesPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatches"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateMatchLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateMatchLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodClubsClubidVarDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubsClubidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DeleteClubLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DeleteClubLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodMatchesGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatches"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ListMatchesLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ListMatchesLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodMatchesMatchidVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetMatchLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetMatchLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodMatchesMatchidVarScorePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateScoreLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateScoreLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodMatchesMatchidVarFinalizePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "FinalizeMatchLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "FinalizeMatchLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodMeGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceMe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetMeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetMeLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodProfilePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceProfile"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateProfileLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateProfileLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodClubsClubidVarMembersPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubsClubidVarMembers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "JoinClubLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "JoinClubLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodClubsClubidVarMembersGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceClubsClubidVarMembers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ListMembersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ListMembersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1758442838625": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodClubsOptions",
            "ApiGatewayMethodMatchesOptions",
            "ApiGatewayMethodClubsClubidVarOptions",
            "ApiGatewayMethodMatchesMatchidVarOptions",
            "ApiGatewayMethodMatchesMatchidVarScoreOptions",
            "ApiGatewayMethodMatchesMatchidVarFinalizeOptions",
            "ApiGatewayMethodMeOptions",
            "ApiGatewayMethodProfileOptions",
            "ApiGatewayMethodClubsClubidVarMembersOptions",
            "ApiGatewayMethodClubsGet",
            "ApiGatewayMethodClubsPost",
            "ApiGatewayMethodMatchesPost",
            "ApiGatewayMethodClubsClubidVarDelete",
            "ApiGatewayMethodMatchesGet",
            "ApiGatewayMethodMatchesMatchidVarGet",
            "ApiGatewayMethodMatchesMatchidVarScorePost",
            "ApiGatewayMethodMatchesMatchidVarFinalizePost",
            "ApiGatewayMethodMeGet",
            "ApiGatewayMethodProfilePost",
            "ApiGatewayMethodClubsClubidVarMembersPost",
            "ApiGatewayMethodClubsClubidVarMembersGet"
          ]
        },
        "GetClubsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetClubsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateClubLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateClubLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateMatchLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateMatchLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DeleteClubLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteClubLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "ListMatchesLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ListMatchesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetMatchLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetMatchLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateScoreLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateScoreLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "FinalizeMatchLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "FinalizeMatchLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetMeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetMeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateProfileLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateProfileLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "JoinClubLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "JoinClubLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "ListMembersLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ListMembersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "WebsocketsApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-tennis-club-tracker-websockets",
            "RouteSelectionExpression": "$request.body.action",
            "Description": "Serverless Websockets",
            "ProtocolType": "WEBSOCKET"
          }
        },
        "WsConnectWebsocketsIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "WsConnectLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "WsDisconnectWebsocketsIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "WsDisconnectLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "WsDefaultWebsocketsIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "WsDefaultLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "WsConnectLambdaPermissionWebsockets": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "WebsocketsApi",
            "WsConnectLambdaFunction"
          ],
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "WsConnectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com"
          }
        },
        "WsDisconnectLambdaPermissionWebsockets": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "WebsocketsApi",
            "WsDisconnectLambdaFunction"
          ],
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "WsDisconnectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com"
          }
        },
        "WsDefaultLambdaPermissionWebsockets": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "WebsocketsApi",
            "WsDefaultLambdaFunction"
          ],
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "WsDefaultLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com"
          }
        },
        "SconnectWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$connect",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WsConnectWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "SdisconnectWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$disconnect",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WsDisconnectWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "SdefaultWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$default",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WsDefaultWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "WebsocketsDeploymentStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "StageName": "dev",
            "Description": "Serverless Websockets",
            "DeploymentId": {
              "Ref": "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0"
            }
          }
        },
        "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0": {
          "Type": "AWS::ApiGatewayV2::Deployment",
          "DependsOn": [
            "SconnectWebsocketsRoute",
            "SdisconnectWebsocketsRoute",
            "SdefaultWebsocketsRoute"
          ],
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "Description": "Serverless Websockets"
          }
        },
        "ClubsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Clubs",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "clubId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "clubId",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Users",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "MatchesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Matches",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "matchId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "clubId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "startedAt",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "matchId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "byClub",
                "KeySchema": [
                  {
                    "AttributeName": "clubId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "byClubV2",
                "KeySchema": [
                  {
                    "AttributeName": "clubId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "startedAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "ConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Connections",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "clubId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "byClub",
                "KeySchema": [
                  {
                    "AttributeName": "clubId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "ClubMembersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-ClubMembers",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "clubId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "clubId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "userId",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "byUser",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-west-2-50484812-2351",
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-ServerlessDeploymentBucketName"
          }
        },
        "CreateClubLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateClubLambdaVersionct0IaZC6zFwaO5fFsBIhFZP9oZSncn7ImmMVhL67TI"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-CreateClubLambdaFunctionQualifiedArn"
          }
        },
        "GetClubsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetClubsLambdaVersionaN7fy0xORcMJDeEqp3bWhhDyDiBALnDgczMW31TML0"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-GetClubsLambdaFunctionQualifiedArn"
          }
        },
        "CreateMatchLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateMatchLambdaVersionwmkqpoBJhnI25Cq9X9ZvhsvJ8WvLTqkDXAIxmpUxo"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-CreateMatchLambdaFunctionQualifiedArn"
          }
        },
        "DeleteClubLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteClubLambdaVersion5LcOe6w3qFyfDK2NoFrb4661qP7zO8BK3CrVNHeeyg"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-DeleteClubLambdaFunctionQualifiedArn"
          }
        },
        "GetMatchLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetMatchLambdaVersion9sY08c54HCPegivDFgH3ra4xxestqQxJlYXXUReztc"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-GetMatchLambdaFunctionQualifiedArn"
          }
        },
        "UpdateScoreLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateScoreLambdaVersionrHOp994yXo216RNe2Pqn6N9xIohpcsYa7r2rcoGLfs"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-UpdateScoreLambdaFunctionQualifiedArn"
          }
        },
        "ListMatchesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ListMatchesLambdaVersion3fHY78sc6nzYVrhF41Yg0GOpT2AneiYkOT3L0plQ"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-ListMatchesLambdaFunctionQualifiedArn"
          }
        },
        "GetMeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetMeLambdaVersion65WFSST83TOPmH5gpk8XQZTff0e8GPNgYlcaqjPto"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-GetMeLambdaFunctionQualifiedArn"
          }
        },
        "FinalizeMatchLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "FinalizeMatchLambdaVersionnWclLDrfSeANwtmXnYdD1PS2mhDVLR6yMBxgRc1ayek"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-FinalizeMatchLambdaFunctionQualifiedArn"
          }
        },
        "UpdateProfileLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateProfileLambdaVersionc8FC50ByTmYRf8I19oj7NuiBiFiPuEMltyi0bMhEE"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-UpdateProfileLambdaFunctionQualifiedArn"
          }
        },
        "ListMembersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ListMembersLambdaVersionccQXT5JYAlHvo2Oqp7pilqmLdzxc0GCJVKjwKuU2bQ"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-ListMembersLambdaFunctionQualifiedArn"
          }
        },
        "WsDisconnectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "WsDisconnectLambdaVersionjD9say63GiJZT7VvErEiGEfoK39deaxBbGRSQtcuS9I"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-WsDisconnectLambdaFunctionQualifiedArn"
          }
        },
        "JoinClubLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "JoinClubLambdaVersionuluwVLxId2PtOXIjqczb4NMwzs7pVRmCYHRaW4pXk"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-JoinClubLambdaFunctionQualifiedArn"
          }
        },
        "WsDefaultLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "WsDefaultLambdaVersionhOuaTj6DiEYVPlJN1a4plVKCt0Kk0hOb8qj2Pt4U7bM"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-WsDefaultLambdaFunctionQualifiedArn"
          }
        },
        "WsConnectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "WsConnectLambdaVersionMc49omLaHKeGTheXXRX8pUKIOaEjlxEcqhhvlYY0"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-WsConnectLambdaFunctionQualifiedArn"
          }
        },
        "PreSignUpLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PreSignUpLambdaVersionRa18PyRLm6GgkZzBTWyIO5SHqkISF1CSEuLUwkmqc"
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-PreSignUpLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-ServiceEndpoint"
          }
        },
        "ServiceEndpointWebsocket": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "wss://",
                {
                  "Ref": "WebsocketsApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-tennis-club-tracker-dev-ServiceEndpointWebsocket"
          }
        }
      }
    }
  }
}