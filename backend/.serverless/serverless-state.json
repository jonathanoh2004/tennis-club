{
  "service": {
    "service": "tennis-club-tracker",
    "serviceObject": {
      "name": "tennis-club-tracker"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-west-2",
      "stage": "dev",
      "environment": {
        "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
        "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
        "USERS_TABLE": "tennis-club-tracker-dev-Users",
        "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:Scan"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Clubs",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Users",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Matches/index/byClub",
                "arn:aws:dynamodb:us-west-2:047212758498:table/tennis-club-tracker-dev-Connections/index/byClub"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:ManageConnections"
              ],
              "Resource": "arn:aws:execute-api:us-west-2:047212758498:*/dev/@connections/*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetClubsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getClubs"
            }
          },
          "CreateClubLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createClub"
            }
          },
          "CreateMatchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-createMatch"
            }
          },
          "ListMatchesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-listMatches"
            }
          },
          "GetMatchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-getMatch"
            }
          },
          "UpdateScoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-updateScore"
            }
          },
          "FinalizeMatchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-finalizeMatch"
            }
          },
          "WsConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsConnect"
            }
          },
          "WsDisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDisconnect"
            }
          },
          "WsDefaultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tennis-club-tracker-dev-wsDefault"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "tennis-club-tracker",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tennis-club-tracker-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tennis-club-tracker",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetClubsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/getClubs.zip"
              },
              "Handler": "handlers/clubs.get",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-getClubs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClubsLogGroup"
            ]
          },
          "CreateClubLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/createClub.zip"
              },
              "Handler": "handlers/clubs.create",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-createClub",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateClubLogGroup"
            ]
          },
          "CreateMatchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/createMatch.zip"
              },
              "Handler": "handlers/matches.create",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-createMatch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateMatchLogGroup"
            ]
          },
          "ListMatchesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/listMatches.zip"
              },
              "Handler": "handlers/matches.list",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-listMatches",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListMatchesLogGroup"
            ]
          },
          "GetMatchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/getMatch.zip"
              },
              "Handler": "handlers/matches.get",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-getMatch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMatchLogGroup"
            ]
          },
          "UpdateScoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/updateScore.zip"
              },
              "Handler": "handlers/matches.score",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-updateScore",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateScoreLogGroup"
            ]
          },
          "FinalizeMatchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/finalizeMatch.zip"
              },
              "Handler": "handlers/matches.finalize",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-finalizeMatch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FinalizeMatchLogGroup"
            ]
          },
          "WsConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/wsConnect.zip"
              },
              "Handler": "handlers/websocket.connect",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-wsConnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WsConnectLogGroup"
            ]
          },
          "WsDisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/wsDisconnect.zip"
              },
              "Handler": "handlers/websocket.disconnect",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-wsDisconnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WsDisconnectLogGroup"
            ]
          },
          "WsDefaultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-50484812-2351",
                "S3Key": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z/wsDefault.zip"
              },
              "Handler": "handlers/websocket.onMessage",
              "Runtime": "nodejs20.x",
              "FunctionName": "tennis-club-tracker-dev-wsDefault",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CLUBS_TABLE": "tennis-club-tracker-dev-Clubs",
                  "MATCHES_TABLE": "tennis-club-tracker-dev-Matches",
                  "USERS_TABLE": "tennis-club-tracker-dev-Users",
                  "CONNECTIONS_TABLE": "tennis-club-tracker-dev-Connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WsDefaultLogGroup"
            ]
          },
          "GetClubsLambdaVersionzTGMKUeEL7KOEVlJWv62ydOZnFyNSQy5bBMh3g5jiMY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClubsLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "GetMatchLambdaVersionQqDM5x4rpYbRWYcfiv7WiIaY0vQoer5KwYP88P0P4ro": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMatchLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "ListMatchesLambdaVersion7sLb9ChahfQUcFKVZdcQGlCXeP1g4GEwIR9NkI8VUM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListMatchesLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "CreateMatchLambdaVersionoosDCQolW6OlkOyRhvSMEQFquMqzZp3dNKeWFBN6E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateMatchLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "CreateClubLambdaVersionqJWWkKBD8sZBjge2xeFkZZtd2kVlBWQUVPDIOHxozkg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateClubLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "WsConnectLambdaVersionigH7HUxVyGEMBZaDxm9rVYFw8eCiYbqMvg5pSUSVbg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsConnectLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "UpdateScoreLambdaVersiongrwwgbxwofW2CMVDbtx95TkxsqtRrH8NfKaMF2IihA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateScoreLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "FinalizeMatchLambdaVersionFfEI0sDmPBKVPqmXApt5R3BkNVeuF06ueonX1kdA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FinalizeMatchLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "WsDefaultLambdaVersionCHRF1bLFRVTdjEsdfzDHVRuWu4btO2k5FfT0rIVE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsDefaultLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "WsDisconnectLambdaVersionlFWTUhn12dvUoqI5lwWNKzq2Tud1q53PlfilD1qAI4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsDisconnectLambdaFunction"
              },
              "CodeSha256": "Tg/w8qLC8w9rMT50+Yn8enfI6kkfHpFPwKsYK6b4j6w="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-tennis-club-tracker",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceClubs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "clubs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatches": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "matches",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchesMatchidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "PathPart": "{matchId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchesMatchidVarScore": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "PathPart": "score",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchesMatchidVarFinalize": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "PathPart": "finalize",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodClubsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesMatchidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesMatchidVarScoreOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchesMatchidVarFinalizeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodClubsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClubsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetClubsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodClubsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClubs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateClubLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateClubLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateMatchLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateMatchLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatches"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListMatchesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListMatchesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesMatchidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetMatchLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetMatchLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesMatchidVarScorePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarScore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateScoreLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateScoreLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchesMatchidVarFinalizePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchesMatchidVarFinalize"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FinalizeMatchLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FinalizeMatchLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1755492045454": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodClubsOptions",
              "ApiGatewayMethodMatchesOptions",
              "ApiGatewayMethodMatchesMatchidVarOptions",
              "ApiGatewayMethodMatchesMatchidVarScoreOptions",
              "ApiGatewayMethodMatchesMatchidVarFinalizeOptions",
              "ApiGatewayMethodClubsGet",
              "ApiGatewayMethodClubsPost",
              "ApiGatewayMethodMatchesPost",
              "ApiGatewayMethodMatchesGet",
              "ApiGatewayMethodMatchesMatchidVarGet",
              "ApiGatewayMethodMatchesMatchidVarScorePost",
              "ApiGatewayMethodMatchesMatchidVarFinalizePost"
            ]
          },
          "GetClubsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClubsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateClubLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateClubLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateMatchLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateMatchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListMatchesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListMatchesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetMatchLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMatchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateScoreLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateScoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FinalizeMatchLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FinalizeMatchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-tennis-club-tracker-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "WsConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsDisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsDisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsDefaultWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsDefaultLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "WsDisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsDisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsDisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "WsDefaultLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsDefaultLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsDefaultLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsDisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsDefaultWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0"
              }
            }
          },
          "WebsocketsDeploymentgLhOv36Uvzqz0C2qpcUpmUlblqvIxx2UXkz3nqHd0": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "ClubsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Clubs",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "clubId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Users",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "MatchesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Matches",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "matchId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "matchId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byClub",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "ConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "tennis-club-tracker-dev-Connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "clubId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "byClub",
                  "KeySchema": [
                    {
                      "AttributeName": "clubId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-west-2-50484812-2351",
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetClubsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClubsLambdaVersionzTGMKUeEL7KOEVlJWv62ydOZnFyNSQy5bBMh3g5jiMY"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-GetClubsLambdaFunctionQualifiedArn"
            }
          },
          "GetMatchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMatchLambdaVersionQqDM5x4rpYbRWYcfiv7WiIaY0vQoer5KwYP88P0P4ro"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-GetMatchLambdaFunctionQualifiedArn"
            }
          },
          "ListMatchesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListMatchesLambdaVersion7sLb9ChahfQUcFKVZdcQGlCXeP1g4GEwIR9NkI8VUM"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ListMatchesLambdaFunctionQualifiedArn"
            }
          },
          "CreateMatchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateMatchLambdaVersionoosDCQolW6OlkOyRhvSMEQFquMqzZp3dNKeWFBN6E"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-CreateMatchLambdaFunctionQualifiedArn"
            }
          },
          "CreateClubLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateClubLambdaVersionqJWWkKBD8sZBjge2xeFkZZtd2kVlBWQUVPDIOHxozkg"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-CreateClubLambdaFunctionQualifiedArn"
            }
          },
          "WsConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsConnectLambdaVersionigH7HUxVyGEMBZaDxm9rVYFw8eCiYbqMvg5pSUSVbg"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-WsConnectLambdaFunctionQualifiedArn"
            }
          },
          "UpdateScoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateScoreLambdaVersiongrwwgbxwofW2CMVDbtx95TkxsqtRrH8NfKaMF2IihA"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-UpdateScoreLambdaFunctionQualifiedArn"
            }
          },
          "FinalizeMatchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FinalizeMatchLambdaVersionFfEI0sDmPBKVPqmXApt5R3BkNVeuF06ueonX1kdA"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-FinalizeMatchLambdaFunctionQualifiedArn"
            }
          },
          "WsDefaultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsDefaultLambdaVersionCHRF1bLFRVTdjEsdfzDHVRuWu4btO2k5FfT0rIVE"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-WsDefaultLambdaFunctionQualifiedArn"
            }
          },
          "WsDisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsDisconnectLambdaVersionlFWTUhn12dvUoqI5lwWNKzq2Tud1q53PlfilD1qAI4"
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-WsDisconnectLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ServiceEndpoint"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-tennis-club-tracker-dev-ServiceEndpointWebsocket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getClubs": {
        "handler": "handlers/clubs.get",
        "events": [
          {
            "http": {
              "path": "clubs",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-getClubs",
        "package": {
          "artifact": ".serverless\\getClubs.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetClubsLambdaVersionzTGMKUeEL7KOEVlJWv62ydOZnFyNSQy5bBMh3g5jiMY"
      },
      "createClub": {
        "handler": "handlers/clubs.create",
        "events": [
          {
            "http": {
              "path": "clubs",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-createClub",
        "package": {
          "artifact": ".serverless\\createClub.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateClubLambdaVersionqJWWkKBD8sZBjge2xeFkZZtd2kVlBWQUVPDIOHxozkg"
      },
      "createMatch": {
        "handler": "handlers/matches.create",
        "events": [
          {
            "http": {
              "path": "matches",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-createMatch",
        "package": {
          "artifact": ".serverless\\createMatch.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateMatchLambdaVersionoosDCQolW6OlkOyRhvSMEQFquMqzZp3dNKeWFBN6E"
      },
      "listMatches": {
        "handler": "handlers/matches.list",
        "events": [
          {
            "http": {
              "path": "matches",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-listMatches",
        "package": {
          "artifact": ".serverless\\listMatches.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ListMatchesLambdaVersion7sLb9ChahfQUcFKVZdcQGlCXeP1g4GEwIR9NkI8VUM"
      },
      "getMatch": {
        "handler": "handlers/matches.get",
        "events": [
          {
            "http": {
              "path": "matches/{matchId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-getMatch",
        "package": {
          "artifact": ".serverless\\getMatch.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetMatchLambdaVersionQqDM5x4rpYbRWYcfiv7WiIaY0vQoer5KwYP88P0P4ro"
      },
      "updateScore": {
        "handler": "handlers/matches.score",
        "events": [
          {
            "http": {
              "path": "matches/{matchId}/score",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-updateScore",
        "package": {
          "artifact": ".serverless\\updateScore.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateScoreLambdaVersiongrwwgbxwofW2CMVDbtx95TkxsqtRrH8NfKaMF2IihA"
      },
      "finalizeMatch": {
        "handler": "handlers/matches.finalize",
        "events": [
          {
            "http": {
              "path": "matches/{matchId}/finalize",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-finalizeMatch",
        "package": {
          "artifact": ".serverless\\finalizeMatch.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "FinalizeMatchLambdaVersionFfEI0sDmPBKVPqmXApt5R3BkNVeuF06ueonX1kdA"
      },
      "wsConnect": {
        "handler": "handlers/websocket.connect",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-wsConnect",
        "package": {
          "artifact": ".serverless\\wsConnect.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "WsConnectLambdaVersionigH7HUxVyGEMBZaDxm9rVYFw8eCiYbqMvg5pSUSVbg"
      },
      "wsDisconnect": {
        "handler": "handlers/websocket.disconnect",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-wsDisconnect",
        "package": {
          "artifact": ".serverless\\wsDisconnect.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "WsDisconnectLambdaVersionlFWTUhn12dvUoqI5lwWNKzq2Tud1q53PlfilD1qAI4"
      },
      "wsDefault": {
        "handler": "handlers/websocket.onMessage",
        "events": [
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "tennis-club-tracker-dev-wsDefault",
        "package": {
          "artifact": ".serverless\\wsDefault.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "WsDefaultLambdaVersionCHRF1bLFRVTdjEsdfzDHVRuWu4btO2k5FfT0rIVE"
      }
    },
    "resources": {
      "Resources": {
        "ClubsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Clubs",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "clubId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "clubId",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Users",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "MatchesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Matches",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "matchId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "clubId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "matchId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "byClub",
                "KeySchema": [
                  {
                    "AttributeName": "clubId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "ConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "tennis-club-tracker-dev-Connections",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "clubId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "byClub",
                "KeySchema": [
                  {
                    "AttributeName": "clubId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "tennis-club-tracker",
      "frameworkVersion": "4",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "handlers/**",
          "utils/**",
          "node_modules/**",
          "package.json",
          "package-lock.json"
        ],
        "artifactsS3KeyDirname": "serverless/tennis-club-tracker/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-west-2-50484812-2351",
        "artifactDirectoryName": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {}
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/tennis-club-tracker/dev/1755492057105-2025-08-18T04:40:57.105Z",
    "artifact": ""
  }
}